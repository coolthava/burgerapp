{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","onChange","changed","elementConfig","value","options","map","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","D_Users_JTTHAVAKU_Desktop_Personal_Reactjs_create_react_app_burgerapp_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","checkValidity","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","_this2","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_7__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_13__","errorMessage","error","message","authRedirect","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_11__","to","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_8__","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.a54abfcb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport classes from './Input.module.css'\r\n\r\nconst input =(props)=> {\r\n    let inputElement=null;\r\n    const inputClasses=[classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input') :\r\n            inputElement=<input\r\n            className={inputClasses.join(' ')} \r\n            onChange={props.changed}\r\n            {...props.elementConfig} \r\n            value={props.value}/>;\r\n            break;\r\n\r\n        case ('select'):\r\n            inputElement= (\r\n            <select\r\n                className= {inputClasses.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map(options => (\r\n                    <option key= {options.value} value={options.value}>{options.displayValue}</option>\r\n                ))}\r\n\r\n            </select>\r\n            );\r\n            break;\r\n\r\n        default:\r\n            inputElement = <input \r\n            className={inputClasses}\r\n            {...props.elementConfig} \r\n            value={props.value}\r\n            onChange={props.changed}/>\r\n\r\n    }\r\n\r\nreturn (\r\n    <div className={classes.Input} >\r\n        <label className={classes.Label} >{props.label}</label>\r\n        {inputElement}\r\n\r\n    </div>\r\n)\r\n   \r\n\r\n}\r\n\r\nexport default input","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__nZZUg\",\"Label\":\"Input_Label__dDRUJ\",\"InputElement\":\"Input_InputElement__qT9tF\",\"Invalid\":\"Input_Invalid__4u4d2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2y0Aa\"};","import React, {Component} from 'react'\r\n\r\nimport Input from '../../components/UI/Input/Input'\r\n\r\nimport Button from '../../components/UI/Button/Button'\r\n\r\nimport classes from './Auth.module.css'\r\n\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport * as actions from '../../store/actions/index'\r\n\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\nimport {updateObject, checkValidity} from '../../shared/utility'\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email:{\r\n                elementType:'input',\r\n                elementConfig: {\r\n                    type:'email',\r\n                    placeholder:'E-mail Address'\r\n                },\r\n                value:'',\r\n                validation :{\r\n                    required:true,\r\n                    isEmail:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            password:{\r\n                elementType:'input',\r\n                elementConfig: {\r\n                    type:'password',\r\n                    placeholder:'Password'\r\n                },\r\n                value:'',\r\n                validation :{\r\n                    required:true,\r\n                    minLength:6\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n        },\r\n        isSignup:true\r\n        \r\n    }\r\n\r\n\r\n    inputChangedHandler=(event, controlName) => {\r\n        const updatedControls= updateObject(this.state.controls,{\r\n            [controlName]: updateObject(this.state.controls[controlName],{\r\n                value:event.target.value,\r\n                valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                touched:true\r\n            })\r\n    })\r\n        this.setState({controls:updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value, this.state.isSignup)\r\n    }\r\n\r\n    switchAuthModeHandler =() => {\r\n        this.setState(prevState=> {\r\n            return {isSignup: !prevState.isSignup}\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n    render () {\r\n        \r\n        const formElementsArray =[];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.controls[key]\r\n            })\r\n        }\r\n\r\n        let form=formElementsArray.map(formElement=> (\r\n            <Input\r\n                    key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value} \r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(event)=>this.inputChangedHandler(event,formElement.id)} />\r\n        ))\r\n        if (this.props.loading) {\r\n            form= <Spinner />\r\n        }\r\n        let errorMessage= null;\r\n\r\n        if (this.props.error) {\r\n            errorMessage= (\r\n                <p>\r\n                    {this.props.error.message}\r\n                </p>\r\n            )\r\n        }\r\n        let authRedirect= null;\r\n\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect=<Redirect to={this.props.authRedirectPath} />\r\n        }\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button  btnType='Success' >Submit</Button>\r\n                </form>\r\n                <Button \r\n                btnType=\"Danger\"\r\n                clicked={this.switchAuthModeHandler}\r\n                >\r\n                SWITCH TO {this.state.isSignup? 'Sign in' : 'Sign up'}\r\n                </Button>\r\n            </div>\r\n        )\r\n        \r\n    \r\n    }\r\n}\r\n\r\nconst mapStateToProps =state => {\r\n    return {\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated:state.auth.token!==null,\r\n        buildingBurger:state.burgerBuilder.building,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps= (dispatch) => {\r\n    return {\r\n        onAuth: (email,password,isSignup)=> dispatch(actions.auth(email,password, isSignup)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth)"],"sourceRoot":""}